{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axiosInstance from '@/axios.js';\nexport default {\n  data() {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      phone: '',\n      role: 'Customer',\n      errors: []\n    };\n  },\n  methods: {\n    validateEmail(email) {\n      const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      return emailPattern.test(email);\n    },\n    validatePassword(password) {\n      const pwdPattern = /(?=.*[\\$%\\^&\\*]).{8,}/;\n      return pwdPattern.test(password);\n    },\n    validatePhone(phone) {\n      const phonePattern = /^04\\d{8}$/;\n      return phonePattern.test(phone);\n    },\n    validateForm() {\n      this.errors = [];\n      const namePattern = /^[A-Za-z]+$/;\n      if (!this.username || !this.username.match(namePattern)) {\n        this.errors.push(\"Username must contain only letters and is required.\");\n      }\n      if (!this.email || !this.validateEmail(this.email)) {\n        this.errors.push(\"Must be in email format and is required.\");\n      }\n      if (!this.password || !this.validatePassword(this.password)) {\n        this.errors.push(\"Password must be at least 8 characters and include at least one special character ($, %, ^, &, *).\");\n      }\n      if (this.password !== this.confirmPassword) {\n        this.errors.push(\"Passwords do not match.\");\n      }\n      if (!this.phone || !this.validatePhone(this.phone)) {\n        this.errors.push(\"Mobile number must be 10 digits and start with 04.\");\n      }\n      return this.errors.length === 0;\n    },\n    async register() {\n      if (!this.validateForm()) {\n        return;\n      }\n      try {\n        const response = await axiosInstance.post('/users/register', {\n          username: this.username,\n          email: this.email,\n          password: this.password,\n          phone: this.phone,\n          role: this.role\n        });\n        if (response.data.token && response.data.user) {\n          localStorage.setItem('token', response.data.token);\n          localStorage.setItem('user', JSON.stringify(response.data.user));\n          this.$router.push('/');\n        } else {\n          this.errors.push('Unexpected response from server.');\n        }\n      } catch (error) {\n        if (error.response && error.response.data && error.response.data.message) {\n          this.errors.push(error.response.data.message);\n        } else {\n          this.errors.push('Registration failed.');\n        }\n        console.error('Error during registration:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axiosInstance","data","username","email","password","confirmPassword","phone","role","errors","methods","validateEmail","emailPattern","test","validatePassword","pwdPattern","validatePhone","phonePattern","validateForm","namePattern","match","push","length","register","response","post","token","user","localStorage","setItem","JSON","stringify","$router","error","message","console"],"sources":["/Users/macbookpro/Documents/University/Year 3/Pathway 1/COS30043 Interface Design and Development/HD Project/football-store-app/src/views/RegisterPage.vue"],"sourcesContent":["<!-- <template>\n    <div>\n      <h1>Register</h1>\n      <form @submit.prevent=\"register\">\n        <div>\n          <label for=\"username\">Username:</label>\n          <input type=\"text\" id=\"username\" v-model=\"username\" required>\n        </div>\n        <div>\n          <label for=\"email\">Email:</label>\n          <input type=\"email\" id=\"email\" v-model=\"email\" required>\n        </div>\n        <div>\n          <label for=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" v-model=\"password\" required>\n        </div>\n        <div>\n          <label for=\"phone\">Phone:</label>\n          <input type=\"text\" id=\"phone\" v-model=\"phone\" required>\n        </div>\n        <div>\n          <label for=\"role\">Role:</label>\n          <select id=\"role\" v-model=\"role\" required>\n            <option>Customer</option>\n            <option>Admin</option>\n          </select>\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n      <p v-if=\"error\">{{ error }}</p>\n      <p>\n        Already have an account? <router-link to=\"/login-page\">Login here</router-link>.\n      </p>\n    </div>\n  </template>\n  \n  <script>\n  import axiosInstance from '@/axios.js'\n\n  export default {\n    data() {\n      return {\n        username: '',\n        email: '',\n        password: '',\n        phone: '',\n        role: 'Customer',\n        error: '',\n      };\n    },\n    methods: {\n      async register() {\n        try {\n          const response = await axiosInstance.post('/users/register', {\n            username: this.username,\n            email: this.email,\n            password: this.password,\n            phone: this.phone,\n            role: this.role,\n          });\n          // Save user data in localStorage or vuex store\n          localStorage.setItem('user', JSON.stringify(response.data));\n          this.$router.push('/profile');\n        } catch (error) {\n          this.error = 'Registration failed';\n        }\n      },\n    },\n  };\n  </script>\n   -->\n\n   <template>\n    <div class=\"register-container my-5\">\n      <h1>Register</h1>\n      <form @submit.prevent=\"register\">\n        <div class=\"form-group\">\n          <label for=\"username\">Username:</label>\n          <input type=\"text\" id=\"username\" v-model=\"username\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"email\">Email:</label>\n          <input type=\"email\" id=\"email\" v-model=\"email\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Password:</label>\n          <input type=\"password\" id=\"password\" v-model=\"password\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"confirmPassword\">Confirm Password:</label>\n          <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"phone\">Phone:</label>\n          <input type=\"text\" id=\"phone\" v-model=\"phone\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"role\">Role:</label>\n          <select id=\"role\" v-model=\"role\" class=\"form-control\">\n            <option>Customer</option>\n            <option>Admin</option>\n          </select>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n      </form>\n      <ul v-if=\"errors.length\" class=\"text-danger\">\n        <li v-for=\"error in errors\" :key=\"error\">{{ error }}</li>\n      </ul>\n      <p>\n        Already have an account? <router-link to=\"/login-page\">Login here</router-link>.\n      </p>\n    </div>\n  </template>\n  \n  <script>\n  import axiosInstance from '@/axios.js'\n  \n  export default {\n    data() {\n      return {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        phone: '',\n        role: 'Customer',\n        errors: [],\n      };\n    },\n    methods: {\n      validateEmail(email) {\n        const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n        return emailPattern.test(email);\n      },\n      validatePassword(password) {\n        const pwdPattern = /(?=.*[\\$%\\^&\\*]).{8,}/;\n        return pwdPattern.test(password);\n      },\n      validatePhone(phone) {\n        const phonePattern = /^04\\d{8}$/;\n        return phonePattern.test(phone);\n      },\n      validateForm() {\n        this.errors = [];\n  \n        const namePattern = /^[A-Za-z]+$/;\n  \n        if (!this.username || !this.username.match(namePattern)) {\n          this.errors.push(\"Username must contain only letters and is required.\");\n        }\n        if (!this.email || !this.validateEmail(this.email)) {\n          this.errors.push(\"Must be in email format and is required.\");\n        }\n        if (!this.password || !this.validatePassword(this.password)) {\n          this.errors.push(\"Password must be at least 8 characters and include at least one special character ($, %, ^, &, *).\");\n        }\n        if (this.password !== this.confirmPassword) {\n          this.errors.push(\"Passwords do not match.\");\n        }\n        if (!this.phone || !this.validatePhone(this.phone)) {\n          this.errors.push(\"Mobile number must be 10 digits and start with 04.\");\n        }\n  \n        return this.errors.length === 0;\n      },\n      async register() {\n        if (!this.validateForm()) {\n          return;\n        }\n  \n        try {\n          const response = await axiosInstance.post('/users/register', {\n            username: this.username,\n            email: this.email,\n            password: this.password,\n            phone: this.phone,\n            role: this.role,\n          });\n  \n          if (response.data.token && response.data.user) {\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('user', JSON.stringify(response.data.user));\n            this.$router.push('/');\n          } else {\n            this.errors.push('Unexpected response from server.');\n          }\n        } catch (error) {\n          if (error.response && error.response.data && error.response.data.message) {\n            this.errors.push(error.response.data.message);\n          } else {\n            this.errors.push('Registration failed.');\n          }\n          console.error('Error during registration:', error);\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .register-container {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n  }\n  \n  .form-group {\n    margin-bottom: 15px;\n  }\n  \n  .btn-primary {\n    background-color: #007bff;\n    border-color: #007bff;\n  }\n  \n  .text-danger {\n    color: #dc3545;\n  }\n  </style>\n  "],"mappings":";AAmHE,OAAOA,aAAY,MAAO,YAAW;AAErC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,eAAe,EAAE,EAAE;MACnBC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,UAAU;MAChBC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAACP,KAAK,EAAE;MACnB,MAAMQ,YAAW,GAAI,kDAAkD;MACvE,OAAOA,YAAY,CAACC,IAAI,CAACT,KAAK,CAAC;IACjC,CAAC;IACDU,gBAAgBA,CAACT,QAAQ,EAAE;MACzB,MAAMU,UAAS,GAAI,uBAAuB;MAC1C,OAAOA,UAAU,CAACF,IAAI,CAACR,QAAQ,CAAC;IAClC,CAAC;IACDW,aAAaA,CAACT,KAAK,EAAE;MACnB,MAAMU,YAAW,GAAI,WAAW;MAChC,OAAOA,YAAY,CAACJ,IAAI,CAACN,KAAK,CAAC;IACjC,CAAC;IACDW,YAAYA,CAAA,EAAG;MACb,IAAI,CAACT,MAAK,GAAI,EAAE;MAEhB,MAAMU,WAAU,GAAI,aAAa;MAEjC,IAAI,CAAC,IAAI,CAAChB,QAAO,IAAK,CAAC,IAAI,CAACA,QAAQ,CAACiB,KAAK,CAACD,WAAW,CAAC,EAAE;QACvD,IAAI,CAACV,MAAM,CAACY,IAAI,CAAC,qDAAqD,CAAC;MACzE;MACA,IAAI,CAAC,IAAI,CAACjB,KAAI,IAAK,CAAC,IAAI,CAACO,aAAa,CAAC,IAAI,CAACP,KAAK,CAAC,EAAE;QAClD,IAAI,CAACK,MAAM,CAACY,IAAI,CAAC,0CAA0C,CAAC;MAC9D;MACA,IAAI,CAAC,IAAI,CAAChB,QAAO,IAAK,CAAC,IAAI,CAACS,gBAAgB,CAAC,IAAI,CAACT,QAAQ,CAAC,EAAE;QAC3D,IAAI,CAACI,MAAM,CAACY,IAAI,CAAC,oGAAoG,CAAC;MACxH;MACA,IAAI,IAAI,CAAChB,QAAO,KAAM,IAAI,CAACC,eAAe,EAAE;QAC1C,IAAI,CAACG,MAAM,CAACY,IAAI,CAAC,yBAAyB,CAAC;MAC7C;MACA,IAAI,CAAC,IAAI,CAACd,KAAI,IAAK,CAAC,IAAI,CAACS,aAAa,CAAC,IAAI,CAACT,KAAK,CAAC,EAAE;QAClD,IAAI,CAACE,MAAM,CAACY,IAAI,CAAC,oDAAoD,CAAC;MACxE;MAEA,OAAO,IAAI,CAACZ,MAAM,CAACa,MAAK,KAAM,CAAC;IACjC,CAAC;IACD,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI,CAAC,IAAI,CAACL,YAAY,CAAC,CAAC,EAAE;QACxB;MACF;MAEA,IAAI;QACF,MAAMM,QAAO,GAAI,MAAMvB,aAAa,CAACwB,IAAI,CAAC,iBAAiB,EAAE;UAC3DtB,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBE,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,IAAI,EAAE,IAAI,CAACA;QACb,CAAC,CAAC;QAEF,IAAIgB,QAAQ,CAACtB,IAAI,CAACwB,KAAI,IAAKF,QAAQ,CAACtB,IAAI,CAACyB,IAAI,EAAE;UAC7CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACtB,IAAI,CAACwB,KAAK,CAAC;UAClDE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACtB,IAAI,CAACyB,IAAI,CAAC,CAAC;UAChE,IAAI,CAACK,OAAO,CAACX,IAAI,CAAC,GAAG,CAAC;QACxB,OAAO;UACL,IAAI,CAACZ,MAAM,CAACY,IAAI,CAAC,kCAAkC,CAAC;QACtD;MACF,EAAE,OAAOY,KAAK,EAAE;QACd,IAAIA,KAAK,CAACT,QAAO,IAAKS,KAAK,CAACT,QAAQ,CAACtB,IAAG,IAAK+B,KAAK,CAACT,QAAQ,CAACtB,IAAI,CAACgC,OAAO,EAAE;UACxE,IAAI,CAACzB,MAAM,CAACY,IAAI,CAACY,KAAK,CAACT,QAAQ,CAACtB,IAAI,CAACgC,OAAO,CAAC;QAC/C,OAAO;UACL,IAAI,CAACzB,MAAM,CAACY,IAAI,CAAC,sBAAsB,CAAC;QAC1C;QACAc,OAAO,CAACF,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}